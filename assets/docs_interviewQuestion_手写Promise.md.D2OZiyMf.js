import{_ as i,c as s,o,ag as r}from"./chunks/framework.C78-raJP.js";const h=JSON.parse('{"title":"手写Promise","description":"","frontmatter":{},"headers":[],"relativePath":"docs/interviewQuestion/手写Promise.md","filePath":"docs/interviewQuestion/手写Promise.md","lastUpdated":1749187958000}'),a={name:"docs/interviewQuestion/手写Promise.md"};function t(l,e,n,p,m,d){return o(),s("div",null,e[0]||(e[0]=[r(`<h1 id="手写promise" tabindex="-1">手写Promise <a class="header-anchor" href="#手写promise" aria-label="Permalink to &quot;手写Promise&quot;">​</a></h1><h2 id="promisea-规范" tabindex="-1">PromiseA+规范 <a class="header-anchor" href="#promisea-规范" aria-label="Permalink to &quot;PromiseA+规范&quot;">​</a></h2><p>想要手写一个 Promise，就要遵循 <a href="https://promisesaplus.com/" target="_blank" rel="noreferrer">Promise/A+</a> 规范，业界所有 Promise 的类库都遵循这个规范。 其实 Promise/A+ 规范对如何实现一个符合标准的 Promise 类库已经阐述的很详细了。每一行代码在 Promise/A+ 规范中都有迹可循</p><p>Promise/A+ 有一下几个特点</p><blockquote><ul><li>promise 有三个状态：pending，fulfilled，or rejected；「规范 Promise/A+ 2.1」</li><li>当new promise时， 需要传递一个executor()执行器，执行器立即执行；</li><li>executor接受两个参数，分别是resolve和reject；</li><li>promise 的默认状态是 pending；</li><li>promise 有一个value保存成功状态的值，可以是undefined/thenable/promise；「规范 Promise/A+ 1.3」</li><li>promise 有一个reason保存失败状态的值；「规范 Promise/A+ 1.5」</li><li>promise 只能从pending到rejected, 或者从pending到fulfilled，状态一旦确认，就不会再改变；</li><li>promise 必须有一个then方法，then 接收两个参数，分别是 promise 成功的回调 onFulfilled, 和 promise 失败的回调 onRejected；「规范 Promise/A+ 2.2」</li><li>如果调用 then 时，promise 已经成功，则执行onFulfilled，参数是promise的value；</li><li>如果调用 then 时，promise 已经失败，那么执行onRejected, 参数是promise的reason；</li><li>如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 then 的失败的回调onRejected；</li></ul></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,6)]))}const u=i(a,[["render",t]]);export{h as __pageData,u as default};
