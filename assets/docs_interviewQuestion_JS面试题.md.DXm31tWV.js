import{_ as l,c as a,o as e,ag as t}from"./chunks/framework.C78-raJP.js";const u=JSON.parse('{"title":"JS面试题","description":"","frontmatter":{},"headers":[],"relativePath":"docs/interviewQuestion/JS面试题.md","filePath":"docs/interviewQuestion/JS面试题.md","lastUpdated":1749437583000}'),s={name:"docs/interviewQuestion/JS面试题.md"};function o(r,i,h,n,p,c){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="js面试题" tabindex="-1">JS面试题 <a class="header-anchor" href="#js面试题" aria-label="Permalink to &quot;JS面试题&quot;">​</a></h1><h2 id="_01-闭包" tabindex="-1">01. 闭包 <a class="header-anchor" href="#_01-闭包" aria-label="Permalink to &quot;01. 闭包&quot;">​</a></h2><ol><li>闭包的概念：函数执行完成后，它内部的变量会被释放，但是如果这些变量被其他函数所引用就不会被释放，产生了闭包(个人理解)</li></ol><p>函数执行形成一个私有的上下文，此上下文中的私有变量，和上下文外的变量互不干扰，也就是把这些变量保护起来了，我们把函数的这种保护机制称之为闭包。【闭包是一种机制】</p><ol start="2"><li>闭包的优点：</li></ol><ul><li>可以访问其他函数内部的变量</li><li>可以保存数据</li><li>可以封装私有数据和方法</li></ul><ol start="3"><li><p>闭包的缺点：过度的使用闭包可能会导致占用过多的内存，在 IE 浏览器中可能会导致内存泄露</p></li><li><p>闭包产生的场景：</p></li></ol><ul><li>立即执行函数(IIFE)</li><li>返回一个函数</li><li>函数作为另一个函数的参数</li><li>定时器、事件绑定、AJAX 等的回调</li></ul><ol start="5"><li>闭包的应用：</li></ol><ul><li>早期的模块化(立即执行函数)</li><li>防抖节流(返回一个函数)</li><li>科里化函数(返回一个函数)</li><li>组合函数(返回一个函数)</li><li>循环事件绑定(事件委托)</li></ul><h2 id="_02-let-和-var-的区别" tabindex="-1">02. let 和 var 的区别 <a class="header-anchor" href="#_02-let-和-var-的区别" aria-label="Permalink to &quot;02. let 和 var 的区别&quot;">​</a></h2><ul><li>let 是块作用域</li><li>let 不会变量提升</li><li>let 不能重复声明</li><li>let 有暂时性死区(在定义之前不能访问)</li></ul><p>补充：const 定义的常量，定义时必须赋值，且该常量的内存地址是不会改变的，但是它的值是可能改变的(比如对象，数组)</p><h2 id="_03-this-指向的几种情况" tabindex="-1">03. this 指向的几种情况 <a class="header-anchor" href="#_03-this-指向的几种情况" aria-label="Permalink to &quot;03. this 指向的几种情况&quot;">​</a></h2><ul><li>自执行函数 -&gt; window(非严格模式)</li><li>普通函数执行 -&gt; window</li><li>.执行 -&gt; . 前面的内容(非严格模式)</li><li>箭头函数 -&gt; 函数定义时的上下文</li><li>call / apply / bind -&gt; 第一个参数(一旦绑定，this 指向不能被改变)</li><li>事件绑定 -&gt; 绑定事件的元素(IE 6 ~ 8 attachEvent 绑定的事件指向 window)</li></ul><h2 id="_04-作用域" tabindex="-1">04. 作用域 <a class="header-anchor" href="#_04-作用域" aria-label="Permalink to &quot;04. 作用域&quot;">​</a></h2><p>作用域分为：全局作用域、函数作用域以及 ES6 提出的块级作用域。</p><p>作用域的作用：</p><ul><li>收集并维护所有声明的标识符(变量和函数)</li><li>按照指定的规则来查找标识符</li><li>确定当前代码对标识符的访问权限</li></ul><h2 id="_05-作用域链" tabindex="-1">05. 作用域链 <a class="header-anchor" href="#_05-作用域链" aria-label="Permalink to &quot;05. 作用域链&quot;">​</a></h2><p>多个作用域之间嵌套就形成了作用域链。</p><p>词法作用域在查找标识符的时候，会先在本作用域查找，没有找到会向上一级作用域查找，一直到找到或者到全局作用域为止</p><h2 id="_06-原型" tabindex="-1">06. 原型 <a class="header-anchor" href="#_06-原型" aria-label="Permalink to &quot;06. 原型&quot;">​</a></h2><p>所有的函数都有一个特殊的属性：原型(prototype)。它是一个指针，指向原型对象，原型对象上的所有属性和方法都可以被所有的实例共享。</p><h2 id="_07-原型链" tabindex="-1">07. 原型链 <a class="header-anchor" href="#_07-原型链" aria-label="Permalink to &quot;07. 原型链&quot;">​</a></h2><p>成员访问首先会找自己的私有属性，如果没有找到，会向所属类的 prototype 查找，直到被找到或者到 Object.prototype 为止，我们把这种查找机制称为“原型链”</p><h2 id="_08-作用域链和原型链的区别" tabindex="-1">08. 作用域链和原型链的区别 <a class="header-anchor" href="#_08-作用域链和原型链的区别" aria-label="Permalink to &quot;08. 作用域链和原型链的区别&quot;">​</a></h2><p>作用域链是指变量访问(查找标识符)，原型链是指成员访问</p><h2 id="_09-作用域和执行上下文的区别" tabindex="-1">09. 作用域和执行上下文的区别 <a class="header-anchor" href="#_09-作用域和执行上下文的区别" aria-label="Permalink to &quot;09. 作用域和执行上下文的区别&quot;">​</a></h2><p>作用域是在函数定义的时候就已经确定了的，函数内的变量是和函数所处的作用域有关 执行上下文就是 this，是在函数执行的时候确定的，函数每次执行都会产生一个新的执行上下文环境，比如函数每次执行的参数可能不一样</p><h2 id="_10-继承的几种方式" tabindex="-1">10. 继承的几种方式 <a class="header-anchor" href="#_10-继承的几种方式" aria-label="Permalink to &quot;10. 继承的几种方式&quot;">​</a></h2><ul><li>原型链继承：在构造函数的原型上扩展属性和方法</li><li>原型式继承：使用 <code>Object.create()</code></li><li>拷贝继承</li><li>构造函数继承：只能继承父类的私有属性和方法，无法继承父类原型的属性和方法</li><li>组合继承：两次调用了构造函数，且子类实例的原型链不干净，包含了父类的私有属性和方法</li><li>寄生组合继承</li></ul><p>扩展：ES6 的 class 继承是使用的哪种继承方式？</p><p>寄生组合继承</p><h2 id="_11-为什么要有事件循环" tabindex="-1">11. 为什么要有事件循环？ <a class="header-anchor" href="#_11-为什么要有事件循环" aria-label="Permalink to &quot;11. 为什么要有事件循环？&quot;">​</a></h2><p>因为 JS 是单线程的，如果某些任务特别耗时，没有事件循环，那么其他的任务就一直被堵塞。</p><h2 id="_12-为什么要有微任务-只有宏任务不行吗" tabindex="-1">12. 为什么要有微任务？只有宏任务不行吗？ <a class="header-anchor" href="#_12-为什么要有微任务-只有宏任务不行吗" aria-label="Permalink to &quot;12. 为什么要有微任务？只有宏任务不行吗？&quot;">​</a></h2><p>宏任务的执行顺序总是和加入宏任务队列的顺序相关，如果此时我们有优先级较高的任务需要执行，只有宏任务是不够的，所以需要引入微任务，提高任务的优先级</p><h2 id="_13-宏任务和微任务" tabindex="-1">13. 宏任务和微任务 <a class="header-anchor" href="#_13-宏任务和微任务" aria-label="Permalink to &quot;13. 宏任务和微任务&quot;">​</a></h2><ol><li>浏览器</li></ol><p>宏任务：</p><ul><li>setTimeout</li><li>setInterVal</li><li>requestFrameAnimation</li><li>I/O</li></ul><p>微任务：</p><ul><li>Promise</li><li>MutationObserver</li></ul><p>宏任务和微任务的执行顺序：</p><p>在一个 script 标签里，代码是自上向下执行的，如果遇到微任务会把这个微任务加入微任务队列，如果遇到宏任务会把宏任务加入宏任务队列。当同步任务执行完成后，会先清理微任务队列，如果微任务里又有微任务，宏任务，也会被加入到微任务，宏任务队列。当所有的微任务执行完之后，再去清理宏任务队列</p><ol start="2"><li>node</li></ol><p>宏任务：</p><ul><li>setImmediate</li><li>setTimeout</li><li>setInterval</li><li>I/O</li></ul><p>微任务：</p><ul><li>Promise</li><li>process.nextTick</li></ul><p>宏任务的执行顺序：</p><ul><li>timers 定时器的回调</li><li>pending callbacks 待定回调(比如 I/O 回调)(不包括 timers,setImmediate,close 的 callbacks)</li><li>idle,prepare(node 内部的)</li><li>poll 轮询(node 内部的)</li><li>check 检测(执行 setImmediate 的回调)</li><li>close callbacks 关闭的回调函数</li></ul><p>宏任务和微任务的执行顺序：</p><ol><li>Node V10 及以前</li></ol><ul><li>执行完一个阶段的所有任务</li><li>执行完 nextTick 队列里面的所有内容</li><li>然后执行完其他微任务队列的内容</li></ul><p>nextTick 优先级比微任务还高，只要一个阶段的任务执行完之后，就会去先清理完 nextTick 队列，再去清理其他的微任务队列</p><ol start="2"><li>Node V11 及以后</li></ol><p>和浏览器保持一致</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setTimeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setImmediate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>上面代码输出的顺序不确定，为什么呢？</p><p>到清空 timers 回调的时候，如果主栈执行耗时小于 1 毫秒，时间还没到，就会跳过了。</p><h2 id="_14-js-单线程-vs-浏览器多线程" tabindex="-1">14. JS 单线程 VS 浏览器多线程 <a class="header-anchor" href="#_14-js-单线程-vs-浏览器多线程" aria-label="Permalink to &quot;14. JS 单线程 VS 浏览器多线程&quot;">​</a></h2><p>JS 是单线程的，但是浏览器的多线程的，打开一个网页，浏览器会开启不同的线程执行不同的任务</p><p>浏览器的线程：</p><ul><li>GUI 渲染线程</li><li>JS 引擎线程</li><li>HTTP 网络请求线程</li><li>定时器监听线程</li><li>DOM 事件监听线程</li></ul><h2 id="_15-promise-和-async-await-的区别" tabindex="-1">15. Promise 和 async/await 的区别 <a class="header-anchor" href="#_15-promise-和-async-await-的区别" aria-label="Permalink to &quot;15. Promise 和 async/await 的区别&quot;">​</a></h2><ol><li>Promise 是基于约定管理异步编程，async/await 是基于 Generator 管理异步编程</li><li>Promise 可以通过 then 的第二个参数 和 catch 捕获异常，async/await 通过 try catch 捕获异常</li></ol><h2 id="_16-遍历对象的方法有哪些" tabindex="-1">16. 遍历对象的方法有哪些 <a class="header-anchor" href="#_16-遍历对象的方法有哪些" aria-label="Permalink to &quot;16. 遍历对象的方法有哪些&quot;">​</a></h2><ul><li>for in</li><li>Object.keys()</li><li>Object.values()</li><li>Object.getOwnPropertyNames() 可以遍历不可枚举的属性，但是不能遍历 Symbol 类型的属性</li><li>Reflect.ownKeys()</li></ul><p><strong>注意：for of 不能遍历对象</strong></p><h2 id="_17-js-对象和-map-有什么区别" tabindex="-1">17. js 对象和 map 有什么区别？ <a class="header-anchor" href="#_17-js-对象和-map-有什么区别" aria-label="Permalink to &quot;17. js 对象和 map 有什么区别？&quot;">​</a></h2><ul><li>普通对象的 key 只能是字符串和 Symbol，map 的 key 可以是任意类型</li><li>普通对象的遍历需使用 Object.keys() Object.values() Object.entries() 转成数组在遍历，虽然 for ... in 可以遍历，但是有些其他的限制，map 可以直接使用 for of 和 forEach 来遍历</li></ul><h2 id="_18-ajax、fetch、axios-三者有什么不同" tabindex="-1">18. Ajax、fetch、Axios 三者有什么不同？ <a class="header-anchor" href="#_18-ajax、fetch、axios-三者有什么不同" aria-label="Permalink to &quot;18. Ajax、fetch、Axios 三者有什么不同？&quot;">​</a></h2><p>三者都用于网络请求，但是不同维度</p><ul><li>Ajax(Asynchronous Javascript and XML)，一种技术统称</li><li>Fetch 一个具体的 API</li><li>Axios 第三方库</li></ul><p>Fetch：</p><ul><li>浏览器的原生 API，用于网络请求</li><li>和 XMLHttpRequest 一个级别</li><li>Fetch 语法更加简洁、易用，支持 Promise</li></ul><p>Axios:</p><ul><li>最常用的网络请求库</li><li>内部可用 XMLHttpRequest 和 Fetch 来实现</li></ul><h2 id="_19-for-in-和-for-of-有什么区别" tabindex="-1">19. for in 和 for of 有什么区别？ <a class="header-anchor" href="#_19-for-in-和-for-of-有什么区别" aria-label="Permalink to &quot;19. for in 和 for of 有什么区别？&quot;">​</a></h2><ul><li>for in 遍历可枚举的数据，比如对象、数组、字符串等，得到的是 key</li><li>for of 遍历拥有 Symbol.iterator 属性的数据结构(值)，比如数组、字符串、Map、Set 等，得到的 value</li></ul><h2 id="_20-for-await-of-有什么作用" tabindex="-1">20. for await of 有什么作用？ <a class="header-anchor" href="#_20-for-await-of-有什么作用" aria-label="Permalink to &quot;20. for await of 有什么作用？&quot;">​</a></h2><p>遍历 Promise 数组</p><h2 id="_21-js-严格模式有什么特点" tabindex="-1">21. JS 严格模式有什么特点？ <a class="header-anchor" href="#_21-js-严格模式有什么特点" aria-label="Permalink to &quot;21. JS 严格模式有什么特点？&quot;">​</a></h2><ul><li>全局变量必须先声明再访问</li><li>禁止使用 with</li><li>创建 eval 作用域（eval 有自己单独的作用域）</li><li>禁止 this 指向 window</li><li>函数参数不能重名</li></ul><h2 id="_22-for-和-foreach-遍历一个数组-哪个更快" tabindex="-1">22. for 和 forEach 遍历一个数组，哪个更快？ <a class="header-anchor" href="#_22-for-和-foreach-遍历一个数组-哪个更快" aria-label="Permalink to &quot;22. for 和 forEach 遍历一个数组，哪个更快？&quot;">​</a></h2><ul><li>for 更快</li><li>forEach 每次都要创建一个函数来调用，函数需要独立的作用域，会有额外的开销</li></ul>`,88)]))}const k=l(s,[["render",o]]);export{u as __pageData,k as default};
